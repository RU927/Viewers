{
  /**
   * Общая конфигурация системы Orthanc.
   **/

  // Логическое имя данного экземпляра Orthanc. Оно
  // отображается в Orthanc Explorer и в URI "/system".
  "Name" : "Orthanc",

  // Путь к каталогу, в котором хранятся тяжелые файлы (т.е.
  // необработанные экземпляры DICOM). Обратные косые черты должны быть либо экранированы путем
  // удвоения, либо заменяться прямыми косыми чертами "/".
  "StorageDirectory" : "/var/lib/orthanc/db-v6",

  // Путь к каталогу, в котором хранится индекс SQLite (если значение не задано, то
  // используется значение StorageDirectory). Этот индекс может храниться на
  // RAM-диске или SSD-устройстве для повышения производительности.
  "IndexDirectory" : "/var/lib/orthanc/db-v6",

  // Путь к каталогу, в котором Orthanc хранит свои большие временные
  // файлы. Содержимое этой папки может быть безопасно удалено после
  // остановки работы Orthanc. Папка должна существовать. Соответствующая
  // файловая система должна иметь соответствующий размер, учитывая, что, например, ZIP
  // архив DICOM-изображений, созданный заданием, может занимать несколько Гбайт,
  // и что в архиве может быть до "min(JobsHistorySize,
  // MediaArchiveSize)" архивов, которые должны храниться одновременно. Если этот параметр не
  // не задано, Orthanc будет использовать временную папку по умолчанию в
  // операционной системы (например, "/tmp/" в UNIX-подобных системах или
  // "C:/Temp" в Microsoft Windows).
  // "TemporaryDirectory" : "/tmp/Orthanc/",

  // Включить прозрачное сжатие экземпляров DICOM
  "StorageCompression" : false,

  // Максимальный размер хранилища в МБ (значение "0" означает отсутствие
  // ограничение на размер хранилища)
  "MaximumStorageSize" : 0,

  // Максимальное количество пациентов, которое может храниться в данный момент времени
  // в хранилище (значение "0" означает отсутствие ограничений на количество
  // пациентов)
  "MaximumPatientCount" : 0,

  // Максимальный размер кэша хранилища в МБ.  Кэш хранилища
  // хранится в оперативной памяти и содержит копии недавно просмотренных
  // файлов (записанных или прочитанных).  Значение "0" означает, что кэш // отключен.
  // отключен.  (новое в Orthanc 1.10.0)
  "MaximumStorageCacheSize" : 128,

  // Список путей к пользовательским Lua-скриптам, которые должны быть загружены
  // в данный экземпляр Orthanc
  "LuaScripts" : [
  ],

  // Список путей к плагинам, которые должны быть загружены в данный
  // экземпляр Orthanc (например, "./libPluginTest.so" для Linux, или
  // "./PluginTest.dll" для Windows). Эти пути могут ссылаться на
  // папки, в этом случае они будут сканироваться нерекурсивно для
  // поиска разделяемых библиотек. Обратные косые черты должны быть либо экранированы путем
  // удвоения, либо заменяться прямыми косыми чертами "/".
  "Plugins" : [
    "/usr/share/orthanc/plugins/"
  ],

  // Максимальное количество одновременно выполняемых заданий обработки
  // в любой момент времени. Значение "0" означает использование всех
  // доступные логические ядра процессора. Для эмуляции Orthanc <= 1.3.2 установите
  // это значение в "1".
  "ConcurrentJobs" : 2,


  /**
   * Конфигурация HTTP-сервера
   **/

  // Включить HTTP-сервер. Если этот параметр имеет значение "false",
  // Orthanc работает как чистый DICOM-сервер. При этом REST API и Orthanc
  // Explorer будут недоступны.
  "HttpServerEnabled" : true,

  // Включение/отключение пользовательского веб-интерфейса Orthanc Explorer. Этот
  // опция имеет смысл только в том случае, если опция "HttpServerEnabled"
  // установлена в значение "true" (новое в Orthanc 1.8.2).
  "OrthancExplorerEnabled" : true,

  // HTTP-порт для REST-сервисов и графического интерфейса
  "HttpPort" : 8042,

  // При значении параметра "true" в случае возникновения ошибки
  // при вызове REST API, в HTTP-ответ помещается JSON-сообщение с описанием ошибки
  // помещается в HTTP-ответ. Эта возможность может быть отключена, если
  // HTTP-клиент некорректно обрабатывает такие ответы.
  "HttpDescribeErrors" : true,

  // Включить сжатие HTTP для улучшения использования пропускной способности сети,
  // за счет увеличения количества вычислений на сервере. Orthanc
  // поддерживает HTTP-кодировки "gzip" и "deflate".
  "HttpCompressionEnabled" : true,

  // Включить публикацию содержимого сервера Orthanc в виде
  // WebDAV ресурс (новое в Orthanc 1.8.0). На localhost ресурс WebDAV
  // ресурс отображается как "http://localhost:8042/webdav/".
  "WebDavEnabled" : true,

  // Разрешать ли удаление через ресурс WebDAV. Это
  // по умолчанию отключена, чтобы избежать случайной потери экземпляров DICOM.
  "WebDavDeleteAllowed" : false,

  // Разрешать ли загрузку данных через WebDAV-доступ.
  "WebDavUploadAllowed" : true,



  /**
   * Конфигурация DICOM-сервера
   **/

  // Включить DICOM-сервер. Если этот параметр имеет значение "false",
  // Orthanc будет работать как чистый REST-сервер. Невозможно будет
  // получать файлы или выполнять запросы/получения по протоколу DICOM.
  "DicomServerEnabled" : true,

  // Название DICOM Application Entity (не может быть длиннее 16
  // символов)
  "DicomAet" : "ORTHANC",

  // Проверяет, соответствует ли вызываемый AET AET системы Orthanc
  // во время входящего запроса DICOM SCU
  "DicomCheckCalledAet" : false,

  // Порт DICOM
  "DicomPort" : 4242,

  // Кодировка по умолчанию, которая принимается для DICOM-файлов без
  // DICOM-тега "SpecificCharacterSet" и используемая при ответе на запросы C-FIND (включая рабочие списки).
  // C-FIND-запросов (в том числе рабочих списков). Допустимыми значениями являются.
  // "Ascii", "Utf8", "Latin1", "Latin2", "Latin3", "Latin4",
  // "Latin5", "Cyrillic", "Windows1251", "Arabic", "Greek", "Hebrew",
  // "Thai", "Japanese", "Chinese", "JapaneseKanji", "Korean", и
  // "SimplifiedChinese".
  "DefaultEncoding" : "Latin1",

  // Синтаксисы передачи, принимаемые Orthanc C-STORE SCP.
  // Это массив, в котором перечислены UID принятых синтаксисов передачи. Каждый
  // запись может содержать подстановочные знаки ("?" или "*"). По умолчанию принимаются все
  // известные синтаксисы передачи принимаются. (новое в Orthanc 1.9.0)
  "AcceptedTransferSyntaxes" : [ "1.2.840.10008.1.*" ],

  // Удобные для пользователя группы синтаксисов передачи, которые могут быть включены или
  // удобные группы синтаксисов передачи, которые можно сразу включить или 
  // отключить. Эти параметры применяются после основного
  // применения опции "AcceptedTransferSyntaxes" (если она присутствует).
  /**
     "DeflatedTransferSyntaxAccepted" : true,
     "JpegTransferSyntaxAccepted" : true,
     "Jpeg2000TransferSyntaxAccepted" : true,
     "JpegLosslessTransferSyntaxAccepted" : true,
     "JpipTransferSyntaxAccepted" : true,
     "Mpeg2TransferSyntaxAccepted" : true,
     "RleTransferSyntaxAccepted" : true,
     "Mpeg4TransferSyntaxAccepted" : true, // Новое в Orthanc 1.6.0
     "H265TransferSyntaxAccepted" : true, // Новое в Orthanc 1.9.0
  **/
  
  // Согласен ли Orthanc выступать в роли C-STORE SCP для неизвестного хранилища.
  // Классы SOP (также известный как "promiscuous mode")
  "UnknownSopClassAccepted" : false,

  // Устанавливает таймаут (в секундах), по истечении которого DICOM-ассоциации
  // закрываются SCP (сервером) Orthanc, если больше не поступает команда DIMSE
  // если от SCU (клиента) не поступает дальнейшая команда DIMSE.
  "DicomScpTimeout" : 30,



  /**
   * Параметры безопасности для HTTP-сервера
   **/

  // Могут ли удаленные узлы подключаться к HTTP-серверу
  "RemoteAccessAllowed" : false,

  // Включен ли SSL
  "SslEnabled" : false,

  // Путь к SSL-сертификату, используемому HTTP-сервером. Файл
  // должен храниться в формате PEM и содержать как сертификат, так и закрытый ключ.
  // сертификат и закрытый ключ. Данная опция имеет смысл только в том случае.
  // если параметр "SslEnabled" равен true.
  "SslCertificate" : "certificate.pem",

  // Устанавливает минимально допустимую версию протокола SSL
  // (ср. с опцией "ssl_protocol_version" в civetweb). По умолчанию,
  // требуется SSL 1.2. Эта опция имеет смысл только в том случае, если "SslEnabled"
  // имеет значение true. (новое в Orthanc 1.8.2)
  //
  // Value => Protocols
  // 0 SSL2+SSL3+TLS1.0+TLS1.1+TLS1.2
  // 1 SSL3+TLS1.0+TLS1.1+TLS1.2
  // 2 TLS1.0+TLS1.1+TLS1.2
  // 3 TLS1.1+TLS1.2
  // 4 TLS1.2
  "SslMinimumProtocolVersion" : 4,

  // Устанавливает принимаемые шифры для SSL-соединений. Шифры должны быть
  // предоставлены в виде списка строк. Если он не задан, то по умолчанию будет использоваться
  // шифры стандарта FIPS 140-2. Данная опция имеет смысл только в том случае, если.
  // "SslEnabled" равен true. (новое в Orthanc 1.8.2)
  /**
    "SslCiphersAccepted" : ["AES128-GCM-SHA256" ]
  **/

  // Проверяются ли сертификаты клиентов-аналогов. Этот
  // опция имеет смысл только в том случае, если параметр "SslEnabled" равен true.
  "SslVerifyPeers" : false,

  // Путь к файлу, содержащему конкатенацию SSL-сертификатов клиентов.
  // сертификата(ов), которые доверяются для проверки идентификации удаленных
  // HTTP-клиентов. Отдельные сертификаты должны храниться в // формате PEM.
  // формате PEM. Данная опция имеет смысл только в том случае, если параметр "SslVerifyPeers"
  // имеет значение true.
  "SslTrustedClientCertificates" : "trustedClientCertificates.pem",
  
  // Включена ли парольная защита (с использованием HTTP
  // базовой аутентификации доступа). Начиная с версии Orthanc 1.5.8, если.
  // "AuthenticationEnabled" не задан явно, аутентификация будет // включена, если удаленный доступ
  // включается, если разрешен удаленный доступ (т.е. значение по умолчанию для
  // "AuthenticationEnabled" равно значению "RemoteAccessAllowed").
  /**
     "AuthenticationEnabled" : false,
   **/



  /**
   * Опции безопасности для DICOM-соединений (SCU/SCP)
   **/

  // Включен ли DICOM TLS в Orthanc SCP (новое в Orthanc 1.9.0)
  "DicomTlsEnabled" : false,

  // Путь к файлу сертификата TLS (в формате PEM), который будет использоваться для
  // как для Orthanc SCP (входящие DICOM-соединения), так и для Orthanc SCU
  // (исходящие DICOM-соединения). Обратите внимание, что в отличие от
  // опции "SslCertificate", сертификат и его закрытый ключ должны быть
  // быть разделены на два отдельных файла. (новое в Orthanc 1.9.0)
  /**
     "DicomTlsCertificate" : "orthanc.crt"
  **/

  // Путь к файлу, содержащему закрытый ключ (в формате PEM), который
  // соответствует сертификату TLS, указанному в опции
  // "DicomTlsCertificate". (новое в Orthanc 1.9.0)
  /**
     "DicomTlsPrivateKey" : "orthanc.key"
  **/

  // Путь к файлу, содержащему все TLS-сертификаты, которым Orthanc
  // может доверять как для SCP (входящие DICOM-соединения), так и для SCU
  // (исходящие DICOM-соединения). Этот файл должен содержать последовательность
  // сертификатов в формате PEM. (новое в Orthanc 1.9.0)
  /**
     "DicomTlsTrustedCertificates" : "trusted.crt"
  **/
  
  // Отклоняет ли Orthanc соединения DICOM TLS к/от удаленных
  // модальностей, не предоставивших сертификат. Установка этого параметра
  // в "true" (resp. "false") соответствует "--require-peer-cert"
  // (или "--verify-peer-cert") в командной строке DCMTK.
  // инструменты. (новое в Orthanc 1.9.3)
  "DicomTlsRemoteCertificateRequired" : true,

  // Разрешает ли Orthanc SCP входящие запросы C-ECHO, даже
  // от модулей SCU, о которых он не знает (т.е. которые не
  // перечисленных выше в параметре "DicomModalities"). Orthanc 1.3.0
  // является единственной версией, которая ведет себя так, как если бы этот аргумент был установлен в "false".
  "DicomAlwaysAllowEcho" : true,

  // Разрешает ли Orthanc SCP входящие запросы C-STORE, даже
  // от модулей SCU, о которых он не знает (т.е. которые не указаны в "DicomAlwaysAllowEcho").
  // перечисленных выше в параметре "DicomModalities")
  "DicomAlwaysAllowStore" : true,

  // Разрешает ли SCP Orthanc входящие запросы C-FIND, даже
  // от модулей SCU, о которых он не знает (т.е. которые не перечислены в опции "DicomModalities
  // перечисленных выше в параметре "DicomModalities"). Установка этой
  // опции в значение "true" влечет за собой риски безопасности. (new in Orthanc 1.9.0)
  // Примечание: Начиная с версии Orthanc 1.10.0, эта опция применяется только к C-FIND
  // запросам на пациентов/исследования/серии/экземпляры. Использовать опцию
  // "DicomAlwaysAllowFindWorklist" для рабочих списков.
  "DicomAlwaysAllowFind" : false,

  // Разрешает ли Orthanc SCP входящие запросы C-FIND для рабочих списков, 
  // даже от модулей SCU, о которых он не знает (т.е. которые не указаны в "DicomAlwaysAllowind").
  // перечисленных выше в параметре "DicomModalities"). Установка этой
  // опции в значение "true" влечет за собой риски безопасности. (новое в Orthanc 1.10.0)
  "DicomAlwaysAllowFindWorklist" : false,

  // Разрешает ли Orthanc SCP входящие запросы C-GET, даже
  // от модулей SCU, о которых он не знает (т.е. которые не
  // перечисленных выше в опции "DicomModalities"). Установка этой
  // опции в значение "true" влечет за собой риски безопасности. (новое в Orthanc 1.9.0)
  "DicomAlwaysAllowGet" : false,

  // Разрешает ли Orthanc SCP входящие запросы C-MOVE, даже
  // от модулей SCU, о которых он не знает (т.е. которые не
  // перечисленных выше в параметре "DicomModalities"). Установка этой
  // опции в значение "true" влечет за собой риски безопасности. (новое в Orthanc 1.9.7)
  "DicomAlwaysAllowMove" : false,

  // Проверяет ли Orthanc IP-адрес/имя хоста удаленного
  // модуля, инициирующего DICOM-соединение (как указано в списке
  // опции "DicomModalities" выше). Если эта опция установлена в значение
  // "false", Orthanc проверяет только AET удаленного модуля.
  "DicomCheckModalityHost" : false,



  /**
   * Топология сети
   **/

  // Список известных DICOM-модулей. Данная опция игнорируется, если.
  // "DicomModalitiesInDatabase" установлен в значение "true", в этом случае
  // необходимо использовать REST API для определения модулей.
  "DicomModalities" : { {
    /**
     * Отмена комментария в следующей строке позволит Orthanc
     * подключаться к экземпляру DICOM-хранилища с открытым исходным кодом "storescp"
     * хранилища (поставляется в дистрибутиве DCMTK), запускаемого командной строкой
     * командной строкой "storescp 2000". Первым параметром является
     * AET удаленного модуля (не может быть длиннее 16 
     * символов), второй - адрес удаленной сети,
     * и третий - номер TCP-порта, соответствующего
     * протоколу DICOM на удаленном модуле (обычно 104).
     **/
    // "sample" : ["STORESCP", "127.0.0.1", 2000 ]

    /**
     * Четвертый параметр предназначен для включения патчей для
     * конкретных производителей PACS. В настоящее время допустимыми значениями являются:
     * - "Generic" (значение по умолчанию),
     * - "GenericNoWildcardInDates" (для замены "*" на "" в полях дат 
     * в исходящих C-FIND запросах, исходящих от Orthanc),
     * - "GenericNoUniversalWildcard" (для замены "*" на "" во всех полях
     * в исходящих запросах C-FIND SCU, исходящих из Orthanc),
     * - "Vitrea",
     * - "GE" (Enterprise Archive, консоли МРТ и Advantage Workstation
     * от GE Healthcare).
     *
     * Этот параметр чувствителен к регистру.
     **/
    // "vitrea" : [ "VITREA", "192.168.1.1", 104, "Vitrea" ]

    /**
     * По умолчанию Orthanc SCP принимает все DICOM-команды (C-ECHO,
     * C-STORE, C-FIND, C-MOVE, C-GET и обязательство хранения), выданные
     * зарегистрированными удаленными модулями SCU. Начиная с версии Orthanc 1.5.0,
     * можно указать, какие DICOM-команды разрешены,
     * отдельно для каждого удаленного модуля, используя приведенный ниже синтаксис.
     *
     * Опция "AllowEcho" (или "AllowStore") действует только в том случае.
     * соответственно, если глобальная опция "DicomAlwaysAllowEcho"
     * (или "DicomAlwaysAllowStore") установлена на "false".
     *
     * Начиная с версии Orthanc 1.7.0, опция "AllowTranscoding" может быть использована для того, чтобы.
     * отключить перекодирование в синтаксис передачи без сжатия, если
     * данная удаленная модальность не поддерживает сжатые синтаксисы передачи
     * синтаксисы. В настоящее время эта опция применяется для Orthanc C-GET SCP
     * и к Orthanc C-STORE SCU. Данная опция действует только в том случае, если
     * глобальная опция "EnableTranscoding" установлена в значение "true".
     *
     * По умолчанию все опции "Allow*" равны true.
     * "AllowStorageCommitment" фактически является псевдонимом для. 
     * "AllowNAction" и "AllowEventReport".
     * 
     * Опция "UseDicomTls" определяет, следует ли использовать DICOM TLS
     * использовать ли DICOM TLS при открытии SCU-соединения от Orthanc к данному удаленному
     * модулю. По умолчанию DICOM TLS не включен.
     *
     * Опция "LocalAet" позволяет перезаписать глобальную опцию
     * опцию "DicomAet", чтобы указать другой AET
     * для Orthanc при инициировании SCU к этому специфическому
     * модальности. Аналогично, параметр "Timeout" позволяет перезаписать
     * глобальное значение "DicomScuTimeout" для каждого конкретного модуля.
     **/
    // "untrusted" : {
    // "AET" : "ORTHANC",
    // "Port" : 104,
    // "Host" : "127.0.0.1",
    // "Manufacturer" : "Generic",
    // "AllowEcho" : false,
    // "AllowFind" : false,
    // "AllowFindWorklist" : false, // new in 1.10.0
    // "AllowGet" : false,
    // "AllowMove" : false,
    // "AllowStore" : true,
    // "AllowStorageCommitment" : false, // new in 1.6.0
    // "AllowTranscoding" : true, // new in 1.7.0
    // "UseDicomTls" : false // new in 1.9.0
    // "LocalAet" : "HELLO" // new in 1.9.0
    // "Timeout" : 60 // new in 1.9.1
    //}
  },

  // Хранить ли модули DICOM в базе данных Orthanc.
  // а не в этом конфигурационном файле (новое в Orthanc 1.5.0)
  "DicomModalitiesInDatabase" : false,

  // Будет ли за C-ECHO SCU автоматически следовать C-FIND SCU,
  // при тестировании связи Orthanc с удаленным DICOM
  // модулем. Это позволяет проверить, что удаленный модуль
  // принимает запросы C-FIND от Orthanc (новое в Orthanc 1.8.1).
  "DicomEchoChecksFind" : false,

  // Таймаут (в секундах), по истечении которого DICOM-ассоциации
  // считаются закрытыми, если удаленный DICOM SCP (сервер)
  // DICOM SCP (сервер) не отвечает.
  "DicomScuTimeout" : 10,

  // При выполнении запроса C-STORE SCU, инициированного Orthanc, если удаленный
  // модальность не поддерживает исходный синтаксис передачи некоторого
  // экземпляра DICOM, укажите, какой синтаксис передачи следует предпочесть
  // для транскодирования этого экземпляра (при условии, что удаленное устройство принимает
  // этот синтаксис). В Orthanc между версиями 1.7.0 и 1.8.2 этот параметр
  // был неявно установлен в значение "Little Endian Implicit"
  // (1.2.840.10008.1.2). В Orthanc <= 1.6.1 и в Orthanc >= 1.9.0,
  // этот параметр по умолчанию имеет значение "Little Endian Explicit"
  // (1.2.840.10008.1.2.1). Данный параметр может соответствовать
  // сжатому синтаксису передачи. (новое в Orthanc 1.9.0)
  "DicomScuPreferredTransferSyntax" : "1.2.840.10008.1.2.1"

  // Количество потоков, используемых встроенным DICOM-сервером.
  // Это определяет количество одновременно выполняемых операций DICOM.
  // выполняться. Примечание: Это не ограничивает количество одновременных
  // соединений. При использовании одного потока в случае получения C-Find во время
  // например, транскодирования входящего C-Store, то придется ждать
  // до окончания обработки C-Store. (новое в
  // Orthanc 1.10.0, до этой версии значение было зафиксировано на 4)
  "DicomThreadsCount" : 4,

  // Список известных узлов Orthanc. Этот параметр игнорируется, если
  // "OrthancPeersInDatabase" имеет значение "true", в этом случае необходимо
  // использовать REST API для определения узлов Orthanc.
  "OrthancPeers" : {
    /**
     * В каждой строке указывается базовый URL-адрес узла Orthanc, возможно.
     * за которым следует пара имя пользователя/пароль (если на узле включена парольная защита)
     * защита паролем включена на узле).
     **/
    // "peer" : [ "http://127.0.0.1:8043/", "alice", "alicePassword" ]
    // "peer2" : [ "http://127.0.0.1:8044/" ]

    /**
     * Это другой, более продвинутый формат для определения узлов Orthanc 
     * В частности, он позволяет указывать HTTP-заголовки, сертификат HTTPS
     * сертификат клиента в формате PEM (как в опции "--cert")
     * в curl), или включить аутентификацию PKCS#11 для смарт-карт.
     * Опция "Timeout" позволяет перезаписать глобальное значение
     * "HttpTimeout" на индивидуальной основе. **/
    // "peer" : {
    // "Url" : "http://127.0.0.1:8043/",
    // "Username" : "alice",
    // "Password" : "alicePassword",
    // "HttpHeaders" : { "Token" : "Hello world" }
    // "CertificateFile" : "client.crt",
    // "CertificateKeyFile" : "client.key",
    // "CertificateKeyPassword" : "certpass",
    // "Pkcs11" : false,
    // "Timeout" : 42 // Новое в Orthanc 1.9.1
    // }
  },

  // Хранить ли узлы Orthanc в базе данных Orthanc.
  // а не в этом конфигурационном файле (новое в Orthanc 1.5.0)
  "OrthancPeersInDatabase" : false,

  // Параметры HTTP-прокси, который будет использоваться Orthanc. Если задано значение
  // пустая строка, то HTTP-прокси не используется. Например:
  // "HttpProxy" : "192.168.0.1:3128"
  // "HttpProxy" : "proxyUser:proxyPassword@192.168.0.1:3128"
  "HttpProxy" : "",

  // Если установлено значение "true", то отладочные сообщения от libcurl будут выдаваться
  // всякий раз, когда Orthanc выполняет исходящий HTTP-запрос. Это особенно
  // полезно для отладки проблем, связанных с HTTPS.
  "HttpVerbose" : false,

  // Установите таймаут для HTTP-запросов, выдаваемых Orthanc (в секундах).
  "HttpTimeout" : 60,

  // Включить проверку узлов при выполнении HTTPS-запросов. Эта
  // опция должна быть установлена в значение "false" при использовании self-signed сертификатов.
  // Обратите внимание, что установка данного значения в "false" приводит к
  // рискам в области безопасности!
  // Ссылка: http://curl.haxx.se/docs/sslcerts.html
  "HttpsVerifyPeers" : true,

  // Путь к сертификатам CA (центра сертификации) для проверки
  // узлов в HTTPS-запросах. Из документации curl ("--cacert"
  // опция): "Указывает curl использовать указанный файл сертификата для
  // проверки узлов. Файл может содержать несколько CA
  // сертификатов. Сертификат(ы) должен(ы) быть в формате PEM." На
  // системах на базе Debian эта опция может быть установлена в значение
  // "/etc/ssl/certs/ca-certificates.crt"
  "HttpsCACertificates" : "",



  /**
   * Дополнительные опции
   **/

  // Словарь символьных имен для определяемых пользователем метаданных. Каждая
  // запись должна сопоставлять уникальную строку с уникальным числом в диапазоне от 1024
  // и 65535. Зарезервированные значения:
  // - плагин визуализации всего слайда Orthanc использует параметр4200
  "UserMetadata" : {
    // "Sample" : 1024
  },

  // Словарь символических имен для определяемых пользователем типов
  // прикрепленных файлов. Каждая запись должна сопоставлять уникальную строку с уникальным
  // числу в диапазоне от 1024 до 65535. Опционально можно указать второй аргумент - 
  // тип содержимого MIME для вложения.
  "UserContentType" : { {
    // "sample" : 1024
    // "sample2" : [ 1025, "application/pdf" ]
  },

  // Количество секунд, в течение которых не было получено ни одного экземпляра
  // пациента, исследования или серии считается стабильным.
  "StableAge" : 60,

  // По умолчанию Orthanc сравнивает AET (Application Entity Titles)
  // без учета регистра. Установка этого параметра в значение "true" позволит включить
  // сопоставление с учетом регистра.
  "StrictAetComparison" : false,

  // При установке данной опции в значение "true" MD5 файлов DICOM
  // будет вычисляться и храниться в базе данных Orthanc. Эта
  // информация может быть использована для обнаружения повреждений диска ценой
  // небольшого увеличения производительности.
  "StoreMD5ForAttachments" : true,

  // Максимальное количество результатов для одного запроса C-FIND на уровне
  // пациента, исследования или серии. Установка этого параметра в "0" означает.
  // отсутствие ограничения.
  "LimitFindResults" : 0,

  // Максимальное количество результатов для одного запроса C-FIND на уровне
  // экземпляра. Установка этого параметра в "0" означает отсутствие ограничений.
  "LimitFindInstances" : 0,

  // Максимальное количество активных заданий в планировщике Orthanc. Когда
  // этот предел достигается, добавление новых заданий блокируется до тех пор, пока
  // какое-либо задание не завершится.
  "LimitJobs" : 10,

  // Если эта опция установлена в значение "true" (поведение по умолчанию до версии Orthanc
  // 1.3.2), Orthanc будет регистрировать ресурсы, которые экспортируются в другие
  // модули DICOM или узлы Orthanc, внутри URI
  // "/exports". Установка этого параметра в значение "false" полезна для предотвращения
  // неограниченного роста индекса в задачах автомаршрутизации (это поведение по умолчанию, начиная с версии Orthanc 1.
  // поведение по умолчанию, начиная с версии Orthanc 1.4.0).
  "LogExportedResources" : false,

  // Включить или отключить HTTP Keep-Alive (постоянные HTTP
  // соединения). Установка этого параметра в значение "true" предотвращает Orthanc
  // проблему #32 ("HttpServer не поддерживает несколько HTTP-запросов в
  // одном TCP-потоке"), но может замедлить работу HTTP-клиентов.
  // которые не поддерживают постоянные соединения. Поведение по умолчанию
  // в Orthanc <= 1.5.1 по умолчанию было "false". Установка этого параметра в значение   
  // "false" также рекомендуется, если Orthanc компилируется на базе
  // Mongoose.
  "KeepAlive" : true,

  // Включить или отключить алгоритм Нагла. Учитывается только в том случае.
  // учитывается, если Orthanc компилируется для использования CivetWeb. Эксперименты
  // показывают, что наилучшую производительность можно получить, установив оба параметра.
  // "KeepAlive" и "TcpNoDelay" в значение "true". Однако следует помнить о следующих // предостережениях.
  // предостережения: https://eklitzke.org/the-caveats-of-tcp-nodelay
  "TcpNoDelay" : true,

  // Количество потоков, используемых встроенным HTTP-сервером.
  "HttpThreadsCount" : 50,

  // Если эта опция установлена в значение "false", то Orthanc будет работать в only index режиме.
  // Файлы DICOM не будут храниться на диске: Orthanc
  // индексирует только небольшое подмножество так называемых "основных DICOM-тегов"
  // в своей SQL-базе данных. Обратите внимание, что данная опция может помешать переходу
  // обновлению до новых версий Orthanc. Также следует учитывать, что такое
  // поведение может быть недоступно для плагинов области хранения.
  "StoreDicom" : true,

  // DICOM-ассоциации, инициированные Lua-скриптами, остаются открытыми до тех пор
  // пока поступают новые DICOM-команды. Эта опция задает количество
  // секунд бездействия перед автоматическим закрытием
  // DICOM-соединения, используемого Lua. Если установлено значение 0, то соединение
  // закрывается немедленно. Эта опция используется только в сценариях Lua.
  "DicomAssociationCloseDelay" : 5,

  // Максимальное количество запросов DICOM на запрос/получение, которые
  // поддерживается программой Orthanc. Наименее часто используемые запросы
  // удаляются по мере поступления новых запросов.
  "QueryRetrieveSize" : 100,

  // При обработке SCP-запроса C-FIND установка этого флага в значение "true"
  // включит чувствительное к регистру совпадение для представления значения PN
  // (например, PatientName). По умолчанию поиск осуществляется
  // без учета регистра, что не соответствует стандарту DICOM.
  "CaseSensitivePN" : false,

  // Настроить PKCS#11 на использование аппаратных модулей безопасности (HSM) и
  // смарт-карт при аутентификации HTTPS-клиентов.
  /**
     "Pkcs11" : {
       "Модуль" : "/usr/local/lib/libbeidpkcs11.so",
       "Модуль" : "C:/Windows/System32/beidpkcs11.dll",
       "Pin" : "1234",
       "Verbose" : true
     }
   **/
  
  // Если установить значение "false", то Orthanc не будет загружать свой словарь приватных тегов по умолчанию
  // Это может быть необходимо, если вы не можете импортировать
  // DICOM-файл, закодированный с использованием синтаксиса передачи Implicit VR Endian,
  // и содержащий приватные теги: Такая ошибка импорта может быть вызвана наличием
  // плохого словаря. Вы можете перечислить интересующие вас приватные теги
  // интересующие вас, в конфигурационной опции "Dictionary" ниже.
  "LoadPrivateDictionary" : true,

  // Локаль, которую будет использовать Orthanc. В настоящее время используется только при сравнении
  // строк без учета регистра. Безопасно оставить это
  // значение неопределенным, что позволит Orthanc автоматически определять подходящую локаль.
  // "Локаль" : "en_US.UTF-8",

  // Зарегистрировать новый тег в словаре тегов DICOM, которые известны
  // Orthanc. Каждая строка должна содержать тег (отформатированный в виде 2
  // шестнадцатеричных чисел), представление значения (2 восходящих
  // символа), псевдоним для тега, возможно, минимальную
  // кратность (> 0, по умолчанию 1), возможно, максимальную
  // кратность (0 означает произвольную кратность, по умолчанию - 1), и
  // возможно, Private Creator (для приватных тегов).
  // Примечание: Для приватных тегов следует объявлять только младшие 8 бит
  // элемента, так как старшие 8 бит могут отличаться в разных файлах.
  "Dictionary" : { {
    // "0014,1020" : [ "DA", "ValidationExpiryDate", 1, 1 ]
    // "00e1,c2" : [ "UI", "PET-CT Multi Modality Name", 1, 1, "ELSCINT1" ]
    // "7053,03" : ["ST", "Original Image Filename", 1, 1, "Philips PET Private Group" ]
    // "2001,5f" : [ "SQ", "StackSequence", 1, 1, "Philips Imaging DD 001" ]
  },

  // Загрузка набора внешних DICOM-словарей для замены словарей по умолчанию
  // словарей по умолчанию. Данная опция должна содержать набор файлов в
  // формате DCMTK. Порядок расположения словарей *is*
  // важен. Эта опция может быть использована для превращения Orthanc в DICONDE
  // сервер. (new in Orthanc 1.9.4)
  /**
     "ExternalDictionaries" : [
     "/usr/share/libdcmtk12/dicom.dic",
     "/usr/share/libdcmtk12/diconde.dic"
     ]
  **/

  // Следует ли выполнять операции DICOM C-MOVE синхронно. Если установлено значение
  // "false" (асинхронный режим), то каждый входящий запрос C-MOVE приводит
  // к созданию нового фонового задания. До версии Orthanc 1.3.2.
  // неявным поведением было использование синхронного C-MOVE ("true"). В период с
  // Orthanc 1.4.0 по 1.4.2, поведение по умолчанию было установлено на
  // асинхронный C-MOVE ("false"). Начиная с версии Orthanc 1.5.0,
  // по умолчанию используется синхронный C-MOVE ("true"), что обеспечивает
  // обратную совместимость с Orthanc <= 1.3.2).
  "SynchronousCMove" : true,

  // Максимальное количество завершенных заданий, хранящихся в памяти.
  // Задание на обработку считается завершенным, если оно помечено как
  // " Success" или "Failure". Начиная с версии Orthanc 1.5.0, значение "0"
  // означает, что ни одно задание не должно храниться в памяти (т.е. задания удаляются из
  // истории сразу же после завершения), что препятствует
  // использованию некоторых возможностей Orthanc (как правило, синхронного режима в
  // REST API) и должно быть исключено для лиц, не являющихся разработчиками.
  "JobsHistorySize" : 10,

  // Сохранять ли задания в базе данных Orthanc. Если эта
  // опция установлена в "true", то задания, находящиеся в процессе выполнения/запущенные/завершенные.
  // автоматически перезагружаются из базы данных при остановке Orthanc
  // а затем перезапускается (за исключением случая, когда в командной строке указан аргумент "--no-jobs").
  // Этот параметр должен быть установлен в значение "false", если несколько
  // серверов Orthanc используют одну и ту же базу данных (например, если используется PostgreSQL
  // или MariaDB/MySQL).
  "SaveJobs" : true,

  // Определяет, как Orthanc реагирует на получение экземпляра DICOM.
  // чей SOPInstanceUID уже сохранен. Если установлено значение "true", то новый
  // экземпляр заменяет старый. Если установлено значение "false", то новый экземпляр
  // экземпляр отбрасывается, а старый сохраняется. До версии Orthanc.
  // 1.4.1 неявное поведение соответствовало "false".
  "OverwriteInstances" : false,

  // Максимальное количество ZIP/медиаархивов, которые поддерживаются программой
  // Orthanc, как реакция на асинхронное создание архивов.
  // Наименее часто используемые архивы удаляются по мере создания новых архивов.
  // Эта опция была введена в Orthanc 1.5.0 и не влияет на синхронное создание архивов.
  "MediaArchiveSize" : 1,

  // Параметр производительности, определяющий, как Orthanc обращается
  // к области хранения при операциях поиска (C-FIND, /tools/find API route и
  // QIDO-RS в dicom-web). Возможны три режима: (1) " Always"
  // позволяет Orthanc считывать область хранения, как только ему потребуется какая-либо
  // информация, которой нет в его базе данных (самый медленный режим),
  // (2) " Never" не позволяет Orthanc обращаться к области хранения и
  // заставляет его использовать исключительно свою базу данных (самый быстрый режим), и (3)
  // " Answers" позволяет Orthanc читать область хранения для генерации своих
  // ответов, но не фильтровать DICOM-ресурсы (баланс между
  // этими двумя режимами). По умолчанию установлен режим "Всегда", который
  // соответствует поведению Orthanc <= 1.5.0.
  "StorageAccessOnFind" : "Always",

  // Осуществляет ли Orthanc мониторинг своих метрик (новое в Orthanc 1.5.4). Если
  // установлено значение "true", метрики могут быть получены по адресу
  // "/tools/metrics-prometheus" с использованием формата Prometheus
  // текстовый формат изложения.
  "MetricsEnabled" : true,

  // Разрешен ли вызов URI "/tools/execute-script". Начало
  // с версии Orthanc 1.5.8, этот URI по умолчанию отключен в целях безопасности.
  "ExecuteLuaEnabled" : false,

  // Установка таймаута при обслуживании HTTP-запросов встроенным Web-сервером, в секундах.
  // сервером, в секундах. Это соответствует параметру
  // "request_timeout_ms" из Mongoose/Civetweb. Она будет задавать
  // опции сокета "SO_RCVTIMEO" и "SO_SNDTIMEO" на указанное значение.
  "HttpRequestTimeout" : 30,

  // Устанавливаем создателя private по умолчанию, который используется программой Orthanc, когда она
  // ищет тег private в своем словаре (см. опцию "Dictionary"),
  // или когда он создает/модифицирует DICOM-файл (новое в Orthanc 1.6.0).
  "DefaultPrivateCreator" : "",

  // Максимальное количество отчетов об обязательствах хранения (т.е. полученных от
  // удаленных модулей), которые должны храниться в памяти (новое в Orthanc 1.6.0).
  "StorageCommitmentReportsSize" : 100,

  // Перекодирует ли Orthanc DICOM-файлы в несжатый формат.
  // синтаксис передачи по протоколу DICOM, если удаленный модуль
  // не поддерживает сжатый синтаксис передачи (новое в Orthanc 1.7.0).
  "TranscodeDicomProtocol" : true,

  // Если установлен какой-либо плагин для декодирования/транскодирования экземпляров DICOM,  
  // эта опция определяет, будет ли использоваться встроенный декодер/транскодер в
  // Orthanc (использующий DCMTK) до или после плагинов,
  // или не применяется вообще (новое в Orthanc 1.7.0). Допустимые
  // значениями для этой опции являются "After" (значение по умолчанию, соответствующее
  // поведению Orthanc <= 1.6.1), "Before" или "Disabled".
  "BuiltinDecoderTranscoderOrder" : "After",

  // Если эта опция установлена, то Orthanc будет прозрачно перекодировать любой
  // входящий экземпляр DICOM к заданному синтаксису передачи, прежде чем
  // сохранять его в своей базе данных. Следует иметь в виду, что это может привести к
  // высокой нагрузке на процессор (при перекодировании в какой-либо сжатый
  // синтаксис) или к повышенному потреблению диска (при перекодировании в
  // несжатый синтаксис). Также следует учитывать, что перекодирование в синтаксис передачи
  // синтаксиса передачи с потерями (в частности, JPEG) приведет к изменению параметра
  // DICOM-тег "SOPInstanceUID", а значит, и идентификатор Orthanc на
  // уровне экземпляра, что может нарушить внешний рабочий процесс.
  /**
     "IngestTranscoding" : "1.2.840.10008.1.2"
  **/

  // Применяется ли транскодирование входящего DICOM-файла к входящим экземплярам.  
  // которые имеют несжатый синтаксис передачи, т.е. Little Endian
  // Implicit, Little Endian Explicit или Big Endian Explicit (новое в
  // Orthanc 1.8.2).
  "IngestTranscodingOfUncompressed" : true,
  
  // Применяется ли транскодирование входящих экземпляров DICOM.
  // которые имеют сжатый синтаксис передачи (новое в Orthanc 1.8.2).
  "IngestTranscodingOfCompressed" : true,
  
  // Уровень сжатия, который используется при транскодировании в один из вариантов
  // синтаксисов передачи с потерями/JPEG (целое число от 1 до 100).
  "DicomLossyTranscodingQuality" : 90,

  // Вызывается ли "fsync()" после каждой записи в область хранения
  // (новое в Orthanc 1.7.4). Если эта опция установлена в "true", то Orthanc
  // будет работать медленнее, но DICOM-файлы будут гарантированно 
  // немедленно записаны на диск. Данная опция имеет смысл только в том случае, если
  // используется встроенная область хранения файловой системы. По умолчанию она имеет значение
  // "false" в Orthanc <= 1.7.3 и "true" в Orthanc >= 1.7.4.
  "SyncStorageArea" : true,

  // Если указано, то на совместимых системах при запуске системы вызывается
  // "mallopt(M_ARENA_MAX,...)" при запуске Orthanc. Это имеет тот же эффект, что и установка
  // переменной окружения "MALLOC_ARENA_MAX". Это позволяет избежать большого
  // роста памяти RES, если потоки встроенного HTTP-сервера // вынуждены выделять большие куски.
  // приходится выделять большие куски памяти (обычно это происходит при работе с
  // большими DICOM-файлами). При установке значения "MallocArenaMax" равным "N", эти
  // потоки разделяют между собой "N" пулов памяти (известных как " arenas"). Установка этой
  // опции в "0" не вызывает mallopt()", что было характерно для Orthanc <= 1.8.1.
  "MallocArenaMax" : 5,

  // Деидентифицировать/анонимизировать содержимое журналов (в частности, C-FIND,
  // C-GET и C-MOVE запросы, передаваемые в Orthanc) в соответствии с
  // Таблица E.1-1 стандарта DICOM ( новое в Orthanc 1.8.2)
  "DeidentifyLogs" : true,

  // Если параметр "DeidentifyLogs" равен true, это устанавливает стандарт DICOM, который должен
  // следовать для деидентификации/анонимизации содержимого запроса
  // содержимого. Возможные значения: "2008", "2017c" и "2021b" (новое значение
  // в Orthanc 1.8.2)
  "DeidentifyLogsDicomVersion" : "2021b",

  // Максимальная длина PDU (Protocol Data Unit) в DICOM
  // сетевом протоколе DICOM, выраженная в байтах. Это значение влияет на
  // Orthanc SCU и на Orthanc SCP. По умолчанию оно равно 16 КБ.
  // Допустимый диапазон - [4096,131072]. (новое в Orthanc 1.9.0)
  "MaximumPduLength" : 16384,

  // Произвольный идентификатор данного сервера Orthanc при хранении его
  // глобальных свойств, если используется плагин пользовательского индекса.
  // Этот идентификатор полезен только в случае нескольких
  // читателей/писателей, чтобы избежать коллизий между несколькими
  // серверами Orthanc. Если этот идентификатор не задан, то в качестве него берется SHA-1
  // хэш, полученный из MAC-адресов сетевых интерфейсов,
  // и из AET- и TCP-портов, используемых Orthanc. Ручная установка
  // эта опция необходима в средах Docker/Kubernetes. (new in
  // Orthanc 1.9.2)
  /**
     "DatabaseServerIdentifier" : "Orthanc1"
  **/

  // Защищает ли Orthanc модификацию метаданных и
  // вложений с помощью ревизий, для чего используются HTTP-заголовки
  // "ETag", "If-Match" и "If-None-Match" в вызовах REST-интерфейса.
  // API. Это необходимо для обработки коллизий между одновременными
  // модификациями при наличии нескольких писателей. База данных  
  // бэкэнд должен поддерживать эту опцию, чего пока не наблюдается
  // случае встроенного индекса SQLite. (новое в Orthanc 1.9.2)
  "CheckRevisions" : false,

  // Передавать ли Orthanc ZIP-архив/медиафайл HTTP-клиенту.
  // клиенту. Установка этого параметра в "false" соответствует
  // поведению Orthanc <= 1.9.3: ZIP-архив сначала полностью записывается
  // во временный файл, а затем отправляется клиенту (что требует освобождения
  // дискового пространства и может приводить к таймаутам HTTP при работе с большими архивами).
  //Если  установлено значение "true", то фрагменты ZIP-файла будут отправляться постепенно
  // как только один DICOM-файл будет сжат (новое в Orthanc 1.9.4)
  "SynchronousZipStream" : true,

  // Число потоков загрузчика по умолчанию при формировании Zip архива/носителя.
  // Значение 0 означает, что чтение и запись выполняются последовательно.
  // (поведение по умолчанию).  Значение > 1 имеет смысл только в том случае, если хранилище
  // является распределенным сетевым хранилищем (например, плагином объектного хранилища).
  // (новая экспериментальная функция в Orthanc 1.10.0)
  "ZipLoaderThreads": 0
}









